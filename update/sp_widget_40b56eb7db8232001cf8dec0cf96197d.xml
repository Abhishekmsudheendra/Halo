<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <client_script><![CDATA[

function($scope, $http)
{
  var c=this;
	c.getData = function() 
	{

		c.server.get().then(
			function(response)
			{  
				c.data.tableData= angular.fromJson(response.data.tableData);	
			})
	};
	c.getData();
   //test();
}

/*
var app = angular.module("sn.$sp", ["ngTable", "ngTableDemos"]);

  app.controller("demoController", demoController);
  
  demoController.$inject = ["NgTableParams", "ngTableSimpleList"];
  
  function demoController(NgTableParams, simpleList) 
  {
    this.tableParams = new NgTableParams({
      // initial sort order
      sorting: { incidentId: "asc" } 
    }, {
      dataset: simpleList
    });
  }
	
*/

function test()
{
/*		=================================
**		==== Simple Table Controller ====
**		=================================
**
**
**			With Pure JavaScript .. 
**	 
**
**		No Libraries or Frameworks needed!
**
**
**				fb.com/bastony
**	
*/
// get the table element
var table = document.getElementById("open_incidents"),
// number of rows per page
n = 5,
// number of rows of the table
rowCount = table.rows.length,
// get the first cell's tag name (in the first row)
firstRow = table.rows[0].firstElementChild.tagName,
// boolean var to check if table has a head row
hasHead = (firstRow === "TH"),
// an array to hold each row
tr = [],
// loop counters, to start count from rows[1] (2nd row) if the first row has a head tag
i,ii,j = (hasHead)?1:0,
// holds the first row if it has a (<TH>) & nothing if (<TD>)
th = (hasHead?table.rows[(0)].outerHTML:"");
// count the number of pages
var pageCount = Math.ceil(rowCount / n);
// if we had one page only, then we have nothing to do ..
if (pageCount > 1) 
{
	// assign each row outHTML (tag name & innerHTML) to the array
	for (i = j,ii = 0; i < rowCount; i++, ii++)
		tr[ii] = table.rows[i].outerHTML;
	// create a div block to hold the buttons
	table.insertAdjacentHTML("afterend","<div id='buttons'></div");
	// the first sort, default page is the first one
	sort(1);
}
  
}  

// (p) is the selected page number. it will be generated when a user clicks a button
function sort(p) {
	/* create (rows) a variable to hold the group of rows
	** to be displayed on the selected page,
	** (s) the start point .. the first row in each page, Do The Math
	*/
	var rows = th,s = ((n * p)-n);
	for (i = s; i < (s+n) && i < tr.length; i++)
		rows += tr[i];
	
	// now the table has a processed group of rows ..
	table.innerHTML = rows;
	// create the pagination buttons
	document.getElementById("buttons").innerHTML = pageButtons(pageCount,p);
	// CSS Stuff
	document.getElementById("id"+p).setAttribute("class","active");
}


// (pCount) : number of pages,(cur) : current page, the selected one ..
function pageButtons(pCount,cur) {
	/* this variables will disable the "Prev" button on 1st page
	   and "next" button on the last one */
	var	prevDis = (cur == 1)?"disabled":"",
		nextDis = (cur == pCount)?"disabled":"",
		/* this (buttons) will hold every single button needed
		** it will creates each button and sets the onclick attribute
		** to the "sort" function with a special (p) number..
		*/
		buttons = "<input type='button' value='&lt;&lt; Prev' onclick='sort("+(cur - 1)+")' "+prevDis+">";
	for (i=1; i<=pCount;i++)
		buttons += "<input type='button' id='id"+i+"'value='"+i+"' onclick='sort("+i+")'>";
	buttons += "<input type='button' value='Next &gt;&gt;' onclick='sort("+(cur + 1)+")' "+nextDis+">";
	return buttons;
}
  



]]></client_script>
        <controller_as>c</controller_as>
        <css>
body {
  font-family: "Helvetica Neue", Helvetica, Arial;
  font-size: 14px;
  line-height: 20px;
  font-weight: 400;
  color: #3b3b3b;
  -webkit-font-smoothing: antialiased;
  font-smoothing: antialiased;
background: #2b2b2b;
}

.wrapper {
  margin: 0 auto;
  padding: 40px;
  max-width: 800px;
}

.table {
  margin: 0 0 40px 0;
  width: 100%;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
  display: table;
}
@media screen and (max-width: 580px) {
  .table {
    display: block;
  }
}

.row {
  display: table-row;
  background: #f6f6f6;
}
.row:nth-of-type(odd) {
  background: #e9e9e9;
}
.row.header {
  font-weight: 900;
  color: #ffffff;
  background: #ea6153;
}
.row.green {
  background: #27ae60;
}
.row.blue {
  background: #2980b9;
}
@media screen and (max-width: 580px) {
  .row {
    padding: 8px 0;
    display: block;
  }
}

.cell {
  padding: 6px 12px;
  display: table-cell;
}
@media screen and (max-width: 580px) {
  .cell {
    padding: 2px 12px;
    display: block;
  }
}

#h2_title
{
  color: #b70505;
  font-size: 40px;
  margin-left:auto;
  margin-right:auto;
}

.col-md-12
{
 padding-left: 0px;
  padding-right:0px;
}

.panel-body
{
  padding:0px;
 
}

.panel-heading
{
  font-size:18px;
}
.table
{
   margin-bottom:0px;
}

a:hover {
    text-decoration: underline;
}

td
{
 color:#0c4a6f 
}
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>open-incidents</id>
        <internal>false</internal>
        <link/>
        <name>Open Incidents</name>
        <option_schema>[]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() 
 {
	var json=new global.JSON();
	var list=[];
  /* populate the 'data' object */
  /* e.g., data.table = $sp.getValue('table'); */
  var gr=new GlideRecord('x_19668_halo_incident');
	gr.addQuery('ticket_status','Open');
	gr.query();
	while(gr.next())
		{
			 list.push({incidentId:gr.incident_id+'',incidentType:gr.incident_type.name+'',indicatorCount:gr.complted_indicator_count+'',incidentStatus:gr.ticket_status+'',createdDate:gr.sys_created_on+'',lastUpdated:gr.sys_updated_on+'',sysId:gr.sys_id+''});
		}
	
	data.tableData=json.encode(list);
})();



]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2017-04-17 19:49:22</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>40b56eb7db8232001cf8dec0cf96197d</sys_id>
        <sys_mod_count>263</sys_mod_count>
        <sys_name>Open Incidents</sys_name>
        <sys_package display_value="Halo" source="x_19668_halo">13d836e2db1132001cf8dec0cf9619ba</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Halo">13d836e2db1132001cf8dec0cf9619ba</sys_scope>
        <sys_update_name>sp_widget_40b56eb7db8232001cf8dec0cf96197d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2017-04-22 20:37:21</sys_updated_on>
        <template><![CDATA[

<div  class="container-fluid">
  <div id="h2_title">
      Welcome to the Automated Incident Triage System 
    </div> <br/>
  <div class="panel panel-info">
    <div class="panel-heading"> Open Incidents</div>
    <div class="panel-body">
    
    <div class="col-md-12" ng-controller="demoController as demo" pagenate-table-records>
      <table  ng-table="demo.tableParams" class="table display" id="open_incidents">
        <tr class="row header blue">
          <th>#</th>
          <th>Incident Id</th>
          <th>Incident Type</th>
          <th>Status</th>
          <th>Indicator Count</th>
          <th>Created Date</th>
          <th>Last Updated</th>
        </tr>
       
        <tr ng-repeat="row in c.data.tableData track by $index" class="row" >
          <td data-title="'incidentId'" class="cell">{{$index}}</td>
          <td data-title="'incidentId'"><a href="/haloportal/?id=incident_summary&sys_id={{row.sysId}}" style="color:#0c4a6f">{{row.incidentId}}</a></td>
          <td data-title="'incidentType'" sortable="'incidentType'" class="cell">{{row.incidentType}}</td>
          <td data-title="'incidentStatus'" sortable="'incidentStatus'" class="cell">{{row.incidentStatus}}</td>
          <td data-title="'indicatorCount'" sortable="'indicatorCount'" class="cell">{{row.indicatorCount}}</td>
          <td data-title="'createdDate'" sortable="'createdDate'" class="cell">{{row.createdDate}}</td>
          <td data-title="'lastUpdated'" sortable="'lastUpdated'" class="cell">{{row.lastUpdated}}</td>

        </tr> 
       
        <!--
         <tr ng-repeat="row in c.data.tableData track by $index" class="row">
          <td data-title="'incidentId'" class="cell"></td>
          <td data-title="'incidentId'" sortable="'incidentId'" class="cell"></td>
          <td data-title="'incidentType'" sortable="'incidentType'" class="cell"></td>
          <td data-title="'incidentStatus'" sortable="'incidentStatus'" class="cell"></td>
          <td data-title="'indicatorCount'" sortable="'indicatorCount'" class="cell"></td>
          <td data-title="'createdDate'" sortable="'createdDate'" class="cell"></td>
          <td data-title="'lastUpdated'" sortable="'lastUpdated'" class="cell"></td>

        </tr>  -->
      </table>
  		</div>
  
    </div>
  </div>
</div>
  
  
  <script>
 

</script>

]]></template>
    </sp_widget>
</record_update>
